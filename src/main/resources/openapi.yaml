openapi: 3.0.3
info:
  title: First Spring App API
  version: 1.0.0
  description: API para aprendizado de Java e Spring com CRUD de usuários
servers:
  - url: http://localhost:8080
    description: Servidor de desenvolvimento
  - url: http://localhost:3000
    description: Servidor de produção
paths:
  /hello-world:
    get:
      summary: Retornar mensagem Hello World
      description: Retorna uma mensagem simples concatenada com um nome fixo
      operationId: getHelloWorld
      responses:
        '200':
          description: Mensagem retornada com sucesso
          content:
            text/plain:
              schema:
                type: string
                example: Hello World Leonardo
    post:
      summary: Processar mensagem com usuário
      description: Recebe um identificador único (id) na URL, um parâmetro opcional 'filter' na query string, e um objeto User no corpo da requisição (com 'name' e 'email'). Retorna uma mensagem concatenada como JSON.
      operationId: postHelloWorld
      parameters:
        - name: id
          in: path
          description: Identificador único na URL (ex.: CPF ou outro identificador)
          required: true
          schema:
            type: string
            example: 32376579840
        - name: filter
          in: query
          description: Filtro opcional para a requisição (ex.: nome ou outro valor)
          required: false
          schema:
            type: string
            default: nenhum
            example: Leonardo
      requestBody:
        description: Objeto User contendo o nome e email do usuário
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: Leonardo Brito
              email: lbritosan@gmail.com
      responses:
        '200':
          description: Mensagem concatenada retornada como JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hello World Leonardo Brito id: 32376579840 filter: Leonardo
  /users:
    post:
      summary: Criar um novo usuário
      description: Cria um usuário com nome e email, persistindo no banco
      operationId: createUser
      requestBody:
        description: Objeto User contendo nome e email
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: Leonardo Brito
              email: lbritosan@gmail.com
      responses:
        '200':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      summary: Listar todos os usuários
      description: Retorna a lista de todos os usuários cadastrados
      operationId: getAllUsers
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Buscar usuário por ID
      description: Retorna um usuário específico pelo ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID do usuário
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuário não encontrado
    put:
      summary: Atualizar usuário por ID
      description: Atualiza os dados de um usuário existente
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID do usuário
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Objeto User com dados atualizados
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: Leonardo Brito Atualizado
              email: lbritosan.updated@gmail.com
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuário não encontrado
    delete:
      summary: Deletar usuário por ID
      description: Remove um usuário do banco
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID do usuário
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Usuário deletado com sucesso
        '404':
          description: Usuário não encontrado
components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Leonardo Brito
        email:
          type: string
          format: email
          example: lbritosan@gmail.com